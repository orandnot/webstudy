操作符
一元操作符(++,--)
算数操作符(+,-,*,/,%)
关系操作符(>,<,>=,<=)
相等操作符(==,!=,===,!==)
逻辑操作符(!,&&,||)
赋值操作符(=)
条件操作符(?:)
逗号操作符(,)
对象操作符(new,delete,.,[],instanceof,in)
位操作符(~,&,|,^,<<,>>,>>>)

===============================================================
一元操作符(++,--)
如
var age = 29;
++age;//30
age++;//31
++是在原来的基础上加1

var age =29;
var num = ++age;//num=30,++在前先加1，后赋值

var age =29;
var num = age++;//num=29，++在后先赋值给num,之后age加1

--和++一样

==================================================================
算数操作符(+,-,*,/,%)
如
var num = 5 + 6;//11
+和-也可以作为一元操作符
如
var num = -10;
var num = +5;

==================================================================
关系操作符(>,<,>=,<=)
如
var result = 6 > 4;
atert(result);//true

==================================================================
相等操作符(==,!=,===,!==)
如
var num = 4;
num == 4;//true

var num ="4";
num == 4; //true------做比较时，会进行数值转换

0 == false;//true
2 == ture;//false，在boolean类型中，false表示0，true表示1
'' == 0;//true

var num = "4" ;
num === 4;//false,===表示全等
num !==4;//true,!==表示不全等

==================================================================
逻辑操作符(!,&&,||)
非 与 或
如
!
var flag = true;
alert(!flag);//false

alert(!0);//true
alert(![]);//false
alert(!"");//true
!是对boolean类型的反面，也可以再次取反得到布尔值，如下
alert(!!0);//false
alert(!![]);//true

&&:
var result = true && false;
若第一个操作数的值转换成布尔值是true，则返回第二个操作数
若第一个操作数的值转化成布尔值是false，则返回第一个操作数

var result = true && 3;//3
var result = 1 && 3;//3
var result = [] && "";//""
var result = false && 3;//false
var result = "" && 3;//""
var result = null && true;//null

短路操作：第一个布尔值转化的是false，则后边的就不执行
如
var num = 0;
var result = "" && num++;//num 0

||
var result = true || false; 
若第一个数是true，则返回第一个操作数的值
若第一个操作数的值是false，则整个操作数的值就是第二个操作数的值
var result = true || 3；//true
var result = 1 || 3；//1
var result = [] || "";//[]
var result = false || 0;//0
var result = "" ||3;//3
var result = null || true;//true

短路操作
若第一个操作数的布尔值是true，则后边的操作不会进行
var num = 0;
var result = 3 || num++;//0

==================================================================
赋值操作符(=)
var num = 5;//5
num = num + 5;//10;
num +=5;//10 ,和“num = num + 5;”等价
+= -= *= ？= %=也是一样的

==================================================================
条件操作符(?:)
?:
布尔表达式 ? 表达式一 : 表达式二;
true		表达式一
false		表达式二
如
var result;
var sex = true;
if(sex){
	result = '男';
}
else{
	result = '女';
}
结果是男
上面的代码等价于
var sex = true;
var result = sex ? '男':'女';

==================================================================
逗号操作符(,)
通过逗号操作符可以执行多条语句
如
var num1 = 5;
var num2 =10;
var num3 = 0;
等价于
var num1 =5 , num2 = 10 , num3 = 0;

==================================================================
对象操作符(new,delete,.,[],instanceof,in)
new:获取对象实例
var cat = new Object();

delete:删除对象的属性
var cat ={name:'kitty',age:2};
alert(cat.name);//'kitty'
delete cat.name;
alert(cat.name);//undefined

.和[]来获取对象的属性
var cat = {name:'kitty',age:2};
alert(cat.name);//'kitty'
alert(cat['name']);//'kitty'

instanceof：判断某个变量是否为某个对象实例
var cat = {name:'kitty',age:2};
alert(cat instanceof Object);//true
alert(cat instanceof Number);//false

in：判断某个属性是否在对象中
var cat = {name:'kitty',age:2};
alert('name' in cat);//true
alert('run' in cat);//false

==================================================================
位操作符(~,&,|,^,<<,>>,>>>)
很少用到
如
&
var num = 8;
num & 4;//0
把变量值转化为2进制的位置
8=1000
4=0100
&=0000

var num = 2;
num << 1;//4
num << 2;//8
2=0010
<<1=0100
<<2=1000

==================================================================
操作符优先级
var num = 5 + 4 * 3;
4+0||3;//4
!false&&[];//[]
4 > 3 ? :7 + 10;//5
4=='4' && 3;//3
不确定的时候可以通过加()的形式提升优先级

==================================================================
表达式
5
5 + 4
(5+4)*(6-7)
(5+4)*(6-7)|| ！flag
