JSON
var jerry = {
    name: "jerry",
    age: 1
}
转化成字符串
{
    "name": "jerry",
    "age": 1
}
注意JSON最后一个属性后有逗号，则可能会报错
JS中最后一个属性中有逗号，不影响
JSON的属性名需要用双引号引起来
JSON中的小数至少1位，JS中写1.还是一个正确的数字，但JSON中就不行
JSON比较轻量级（相对xml）
前端与服务器端基本上都是用JSON传输数据的

JSON.parse(text[,reviver])
将JSON转化成JS
JSON -> JS
如
{
	"id": 1,
	"nick": "春鸟秋虫",
	"avatar": "1.jpg",
	"tags": null,
	"authed": false
}
var user = JSON.parse(userJson);
ie6/7不支持

低版本的浏览器做法
if(!window.JSON) {
	window.JSON = {
		parse: function(sJSON) {
			return eval('(' + sJSON + ')');
		}，
		stringify: function(){
			//...
		}
	};
}

JSON.stringify(value[,replacer[,space]])------》后边两个比较少用
JS->JSON
如
ar user = {
            id: 1,
            nick: "春鸟秋虫",
            avatar: "1.jpg",
            tags: null,
            authed: false
};
var userJson = JSON.stringify(user);


<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title></title>
        <script type="text/javascript">
        /** 
 * JSON 值可以是： 
 * 数字（整数或浮点数） 
 * 字符串（在双引号中） 
 * 逻辑值（true 或 false） 
 * 数组（在方括号中） 
 * 对象（在花括号中） 
 * null 
 */  
   
var json = {  
    stringify: function (val) {  
        var stringify = '',  
            curVal;  
   
        if (val === null) {     // null  
            return String(val);  
        }  
           
        switch (typeof val) {  
            case 'number': // number  
            case 'boolean': // boolean  
                return String(val);  
       
            case 'string': // string  
                return '"' + val + '"';  
               
            case 'undefined': // undefined  
            case 'function': // function  
                return undefined;  
        }  
       
        switch (Object.prototype.toString.call(val)) {  
            case '[object Array]': // array  
                stringify += '[';  
       
                for (var i = 0, len = val.length - 1; i < len; i++) {  
                    curVal = json.stringify(val[i]);  
                    stringify += (curVal === undefined ? null : curVal) + ",";  
                }  
                stringify += json.stringify(val[i]);  
       
                stringify += ']';  
                return stringify;  
                   
            case '[object Date]': // date  
                return '"' + (val.toJSON ? val.toJSON() : val.toString()) + '"';  
       
            case '[object RegExp]': // regular expression  
                return "{}";  
       
            case '[object Object]': // object  
                stringify += '{';  
       
                for (var i in val) {  
                    if (val.hasOwnProperty(i)) {  
                        curVal = json.stringify(val[i]);  
                        if (curVal !== undefined) {  
                            stringify += '"' + i + '":' + curVal + ',';  
                        }  
                    }  
                }  
       
                stringify = stringify.slice(0, -1);  
                stringify += '}';  
                return stringify;  
        }  
    }  
}  